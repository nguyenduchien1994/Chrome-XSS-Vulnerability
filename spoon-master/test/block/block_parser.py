from re import findall, match, search
import sys

block_reg = r"""\[block\s([0-9]+(?: loop)?)\]\s*\n# predecessors: ([0-9]*(?:, [0-9]+)*)\s*\n# parent:([| null]*)\s*\n# frontier:([| null])\s*\n# cfrontier:([| null])\s*\n((?:i[0-9]+ = .*\n)+)# successors: ([0-9]*(?:, [0-9]+)*)\s*\n# children: ([0-9]*(?:, [0-9]+)*)\s*\n"""

sinks_reg = {
            "eval":(r"""(i[0-9]+) = get eval"""),
            "innerHTML":(r"""(i[0-9]+) = literal innerHTML""")
            }

sources_reg = {
            "document.URL":(r"""(i[0-9]+) = get document\s*\n(i[0-9]+) = literal URL\s*\n(i[0-9]+) = getprop \1, \2"""),
            }

###############################################################################
# HELPER FUNCTIONS
###############################################################################

def parseCFG(filename):
    """Takes in a filename containing a spoon-parsed CFG, and returns a
       list of the blocks in tuple form"""
    with open(filename, "r") as f:
        cfg = f.read();
    matches = findall(block_reg, cfg);
    return matches

def parse_block(blocktuple):
    """Takes in a block tuple from parseCFG, returns a list of
       the instructions at that block"""
    
    return filter(lambda x: len(x) > 0, blocktuple[5].split('\n'))

def get_sources(blocktuple):
    """Given a list of instructions from parseBlock, return True if the block
       contains the source"""

    found_source = False
    # find source instructions
    for key, source_reg in sources_reg.iteritems():
        #source_gets = [instr for instr in parsed_block if search(source_reg, instr)]
        if len(findall(source_reg, blocktuple[5])) > 0:
            found_source = True
    return found_source

def get_sinks(parsed_block):
    """Given a list of instructions from parseBlock, return True if the block
       contains the sink"""
    found_sink = False
    # find sink instructions
    for key, sink_reg in sinks_reg.iteritems():
        sink_gets = [instr for instr in parsed_block if match(sink_reg, instr)]
        if len(sink_gets) != 0:
            print "found ", key, " in block ",
            found_sink = True

    return found_sink

###############################################################################
# CALL THESE
###############################################################################

def get_sink_blocks(filename):
    cfg = parseCFG(filename)
    sink_blocks = []
    for block in cfg:
        parsed_block = parse_block(block)
        if get_sinks(parsed_block):
            print block[0]
            sink_blocks.append(block[0])
    return sink_blocks

def get_source_blocks(filename):
    cfg = parseCFG(filename)
    source_blocks = []
    for block in cfg:
        #parsed_block = parse_block(block)
        if get_sources(block):
            source_blocks.append(block[0])
    return source_blocks





