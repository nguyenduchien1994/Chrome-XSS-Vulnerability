# Take in a cfg file and parse it into blocks

from re import findall, match
import sys

if len(sys.argv) < 2:
    sys.exit("usage: python parser.py cfg_file.js.cfg")
thefile = sys.argv[1]

block_reg = r"""\[block\s([0-9]+(?: loop)?)\]\s*\n# predecessors: ([0-9]*(?:, [0-9]+)*)\s*\n# parent:([| null]*)\s*\n# frontier:([| null])\s*\n# cfrontier:([| null])\s*\n((?:i[0-9]+ = .*\n)+)# successors: ([0-9]*(?:, [0-9]+)*)\s*\n# children: ([0-9]*(?:, [0-9]+)*)\s*\n"""

###############################################################################
# HELPER FUNCTIONS
###############################################################################

def parseCFG(filename):
    """Takes in a filename containing a spoon-parsed CFG, and returns a
       list of the blocks in tuple form"""
    with open(filename, "r") as f:
        cfg = f.read();
    matches = findall(block_reg, cfg);
    return matches

def parse_block(blocktuple):
    """Takes in a block tuple from parseCFG, returns a list of
       the instructions at that block"""
    return filter(lambda x: len(x) > 0, blocktuple[5].split('\n'))

#TODO: this currently only does one block
def get_arg_of_eval(parsed_block):
    """Given a list of instructions from parseBlock, detect the arguments
       passed into all 'eval' calls within a single block"""
    # find eval instructions
    evalinstr_reg = r"""(i[0-9]+) = get eval"""
    eval_gets = [instr for instr in parsed_block if match(evalinstr_reg, instr)]

    to_ret = []
    for eget in eval_gets:
        # get instruction index of this evalGet
        eval_instr = match(evalinstr_reg, eget).group(1)
        # find the "call" for this instruction
        calleval_reg = r"""i[0-9]+ = call %s, (i[0-9]+)""" % eval_instr
        eval_call = [instr for instr in parsed_block if match(calleval_reg, instr)][0]
        eval_arg = match(calleval_reg, eval_call).group(1) #TODO: err-check
        to_ret += [instr for instr in parsed_block if instr.startswith(eval_arg)]

    return to_ret
    
###############################################################################
# CALL THESE
###############################################################################

def get_all_evals(filename):
    """Get the arguments of all calls to 'eval' within this file"""
    cfg = parseCFG(filename)
    to_ret = []
    for block in cfg:
        parsed_block = parse_block(block)
        to_ret += get_arg_of_eval(parsed_block)
    return to_ret

print get_all_evals(thefile)
    


