# For now, this just downloads all extensions immediately available on the
# front page of the extensions store.  We'll want to follow a bunch of
# links out to get as many extensions as possible.

from selenium import webdriver
from re import findall
from urllib.request import urlretrieve
from pyvirtualdisplay import Display
from time import sleep
from os import listdir
from random import choice

CHROMEDRIVER_PATH = "/usr/lib/chromium-browser/chromedriver"
CHROME_VERSION = "53.0.2785.143"

SLEEP_TIME = 2 # number of seconds to wait for chrome webstore to finish rendering

DOWNLOAD_FOLDER = "extensions/" # MUST end with "/"
STORE_URL = "https://chrome.google.com/webstore/category/extensions"

def get_download_url(ext_id):
    return "https://clients2.google.com/service/update2/crx?response=redirect&prodversion=" + CHROME_VERSION + "&x=id%3D" + ext_id + "%26uc"

def get_ids_from_source(source):
    id_regex = r"""/webstore/detail/.+?/([a-z]{32})"""
    return findall(id_regex, source)

# Virtualize display and drive Chrome
display = Display(visible=0, size=(1024, 768))
display.start()
browser = webdriver.Chrome(executable_path=CHROMEDRIVER_PATH)

# initialize downloaded set to what's in the folder
downloaded = set([f[:-4] for f in listdir(DOWNLOAD_FOLDER)])

# Get all extensions on this page; get set of all non-downloaded
browser.get(STORE_URL)
new_ids = get_ids_from_source(browser.page_source)
non_downloaded = set(new_ids) - downloaded

# if no non-downloaded from front page, randomly pick one to start with
if len(non_downloaded) is 0:
    non_downloaded.add(choice(new_ids))

# download everything on this page
#TODO: parallelize this
while True:
    print(non_downloaded)
    eid = non_downloaded.pop()
    print(eid)

    # Other scripts may also be adding to this set; update downloaded set
    downloaded = set([f[:-4] for f in listdir(DOWNLOAD_FOLDER)])
    non_downloaded.difference_update(downloaded)

    # download this extension if we didn't already
    if eid not in downloaded:
        urlretrieve(get_download_url(eid), DOWNLOAD_FOLDER + eid + ".crx")
        downloaded.add(eid)

    # get related extensions
    related_url =  "https://chrome.google.com/webstore/detail/" + eid + "/related"
    browser.get(related_url)
    # TODO: this is probably a better way to do this than just sleeping for
    # two seconds, but I don't have time to debug it so here we go.
    #elems = []
    #while len(elems) == 0:
        #elems = browser.find_elements_by_css_selector('.a-u a')
    #elems = map(lambda x: x.get_attribute('href'), elems)
    #print(elems)
    sleep(2)
    related = browser.execute_script("return document.documentElement.outerHTML")
    new_ids = get_ids_from_source(related)
    non_downloaded.update(set(new_ids) - downloaded)
    # if no non-downloaded are left, randomly pick one to go investigate next
    if len(non_downloaded) is 0:
        non_downloaded.add(choice(new_ids))

browser.close()
display.stop()
    
