# For now, this just downloads all extensions immediately available on the
# front page of the extensions store.  We'll want to follow a bunch of
# links out to get as many extensions as possible.

from selenium import webdriver
from re import findall
from urllib.request import urlretrieve
from pyvirtualdisplay import Display
from time import sleep

CHROMEDRIVER_PATH = "/usr/lib/chromium-browser/chromedriver"
CHROME_VERSION = "53.0.2785.143"

SLEEP_TIME = 2 # number of seconds to wait for chrome webstore to finish rendering
MAX_COUNTER = 100 # for now, only get 100 extensions

DOWNLOAD_FOLDER = "extensions/" # MUST end with "/"
STORE_URL = "https://chrome.google.com/webstore/category/extensions"

def get_download_url(ext_id):
    return "https://clients2.google.com/service/update2/crx?response=redirect&prodversion=" + CHROME_VERSION + "&x=id%3D" + ext_id + "%26uc"

def get_ids_from_source(source):
    id_regex = r"""/webstore/detail/.+?/([a-z]{32})"""
    return findall(id_regex, source)

# Virtualize display
display = Display(visible=0, size=(1024, 768))
display.start()

# Drive Chrome
browser = webdriver.Chrome(executable_path=CHROMEDRIVER_PATH)
browser.get(STORE_URL)

downloaded = set()
# Get all extensions on this page, add their IDs to a set
new_ids = get_ids_from_source(browser.page_source)

# download everything on this page
counter = 0
for eid in new_ids: # this is getting modified as we go
    if counter >= MAX_COUNTER:
        break
    if eid in downloaded:
        continue
    counter = counter + 1

    # download this extension
    urlretrieve(get_download_url(eid), DOWNLOAD_FOLDER + eid + ".crx")
    downloaded.add(eid)

    # get related extensions
    related_url =  "https://chrome.google.com/webstore/detail/" + eid + "/related"
    browser.get(related_url)
    # TODO: this is probably a better way to do this than just sleeping for
    # two seconds, but I don't have time to debug it so here we go.
    #elems = []
    #while len(elems) == 0:
        #elems = browser.find_elements_by_css_selector('.a-u a')
    #elems = map(lambda x: x.get_attribute('href'), elems)
    #print(elems)
    sleep(2)
    related = browser.execute_script("return document.documentElement.outerHTML")
    new_new_ids = get_ids_from_source(related)

    # put extensions in new_ids if they're not already there
    new_ids = new_ids + [x for x in new_new_ids if x not in new_ids]

browser.close()
display.stop()
    
